{"version":3,"sources":["components/Recipe.js","components/RecipeSearch.js","components/RecipeList.js","components/Details.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","props","_props$recipe","recipe","image_url","title","source_url","publisher","recipe_id","handleDetailId","react_default","a","createElement","className","src","style","height","alt","type","onClick","href","target","rel","RecipeSearch","value","handleSubmit","handleSearch","Fragment","onSubmit","htmlFor","name","placeholder","onChange","RecipeList","recipes","components_RecipeSearch","map","components_Recipe","key","Details","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","url","concat","id","isLoaded","fetch","data","json","josnData","setState","console","log","_context","t0","_this$state$recipe","publisher_url","ingredients","handleIndex","ingredient","index","React","Component","App","changePage","components_RecipeList","search","components_Details","details_id","event","preventDefault","_this$state","baseUrl","getRecipes","jsonData","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef608408.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Recipe = props => {\r\n    const { image_url, title, source_url, publisher, recipe_id } = props.recipe;\r\n    const { handleDetailId } = props;\r\n    \r\n    return(\r\n        <div className=\"col-10 mx-auto col-md-6 col-lg-4 my-3\">\r\n            <div className=\"card\">\r\n                <img src={image_url}\r\n                    className=\"img-card-top\"\r\n                    style={{height: '14rem'}}\r\n                    alt=\"recipe\" />\r\n                <div className=\"card-body text-capitalize\">\r\n                    <h6>{title}</h6>\r\n                    <h6 className=\"text-warning text-slanted\">provided by {publisher}</h6>\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                    <button type=\"button\" className=\"btn btn-primary text-capitalize\" onClick={() => handleDetailId(0, recipe_id)}>details</button>\r\n                    <a href={source_url} className=\"btn btn-success mx-2 text-capitalize\" target=\"_blank\"\r\n                    rel=\"noopener noreferrer\">Source</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Recipe;","import React from 'react';\r\n\r\nconst RecipeSearch = props => {\r\n    // destructure props\r\n    const { value, handleSubmit, handleSearch } = props;\r\n\r\n    // Uses methods passed down to set state in App.js\r\n    return(\r\n        <React.Fragment>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-10 mx-auto col-md-8 mt-5 text-center\">\r\n                            <h1 className=\"text-slanted text-capitalize\"> search for recipe with <strong className=\"text-danger\">Food2Fork</strong></h1>\r\n                            <form className=\"mt-4\" onSubmit={handleSubmit}>\r\n                                <label htmlFor=\"search\" className=\"text-capitalize\">\r\n                                    type ingredients seperated by commas\r\n                                </label>\r\n                                <div className=\"input-group\">\r\n                                    <input type=\"text\" name=\"search\" placeholder=\"steak,potatos,garlic...\" className=\"form-control\" value={value} onChange={handleSearch}/>\r\n                                    <div className=\"input-group-append\">\r\n                                    <button type=\"submit\" className=\"input-group-text bg-secondary text-white\"><i className=\"fas fa-search\"></i></button>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default RecipeSearch;","import React from 'react';\r\nimport Recipe from './Recipe';\r\nimport RecipeSearch from './RecipeSearch';\r\n\r\nconst RecipeList = props => {\r\n    // destructure props\r\n    const { recipes, handleDetailId, handleSearch, handleSubmit, value} = props\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            <RecipeSearch value={value} handleSearch={handleSearch} handleSubmit={handleSubmit} />\r\n            <div className=\"container my-5\">\r\n            {/* Title */}\r\n                <div className=\"row\">\r\n                    <div className=\"col-10 mx-auto col-md-6 text-center text-uppercase mb-3\">\r\n                        <h1 className=\"text-slanted\">Recipe List</h1>\r\n                    </div>\r\n            {/* End Title */}\r\n                </div>\r\n                <div className=\"row\">\r\n                    {\r\n                        recipes.map(recipe => {\r\n                            return(\r\n                                <Recipe key={recipe.recipe_id}\r\n                                recipe={recipe}\r\n                                handleDetailId={handleDetailId}\r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )}\r\n\r\n\r\nexport default RecipeList;","import React from 'react';\r\n\r\n\r\n\r\nclass Details extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            recipe: '',\r\n            url: `https://www.food2fork.com/api/get?key=03c9de31969334077a097330d114675d&rId=${this.props.id}`,\r\n            isLoaded: false\r\n        }\r\n    }\r\n\r\n\r\n    // Async request for details api call\r\n    async componentDidMount() {\r\n        try {\r\n            const data = await fetch(this.state.url);\r\n            const josnData = await data.json()\r\n            this.setState((state, props) => {\r\n                return {recipe: josnData.recipe, isLoaded: true}\r\n            }, () => {});\r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // destructuring state and props\r\n        const { image_url, publisher, publisher_url, source_url, title, ingredients } = this.state.recipe; \r\n        const { handleIndex } = this.props; \r\n        if (this.state.isLoaded){\r\n        return(\r\n            <React.Fragment>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-10 mx-auto col-md-6 my-3\">\r\n                            <button type=\"button\" className=\"btn btn-warning mb-5 text-capitalize\"\r\n                            onClick={() => handleIndex(1)}>\r\n                                Back to list</button>\r\n                                <img src={image_url} className=\"d-block w-100\" alt=\"recipe\" />\r\n                        </div>\r\n                        <div className=\"col-10 mx-auto col-md-6 my-3\">\r\n                            <h6 className=\"text-uppercase\">{title}</h6>\r\n                            <h6 className=\"text-warning text-capitalize text-slanted\">\r\n                                Provided by {publisher}\r\n                            </h6>\r\n                            <a href={publisher_url} target=\"_blank\" \r\n                            rel=\"noopener noreferrer\"\r\n                            className=\"btn btn-primary mt-2 text-capitalize\">Publisher's page</a>\r\n                            <a href={source_url} target=\"_blank\" \r\n                            rel=\"noopener noreferrer\"\r\n                            className=\"btn btn-success mt-2 mx-3 text-capitalize\">Source's page</a>\r\n                            {/* Ingredients list */}\r\n                            <ul className=\"list-group mt-4\">\r\n                                <h2 className=\"mt-3 mb-4\">Ingredients</h2>\r\n                                {\r\n                                    ingredients.map((ingredient, index) => {\r\n                                        return(\r\n                                            <li key={index} className=\"list-group-item text-slanted\">\r\n                                                {ingredient}\r\n                                            </li>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </React.Fragment>\r\n        )}\r\n        return (\r\n            <div>Loading..</div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Details;","import React, { Component } from 'react';\r\nimport RecipeList from './components/RecipeList';\r\nimport Details from './components/Details';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      recipes: [],\r\n      url: 'https://www.food2fork.com/api/search?key=03c9de31969334077a097330d114675d',\r\n      baseUrl: 'https://www.food2fork.com/api/search?key=03c9de31969334077a097330d114675d',\r\n      details_id: 0,\r\n      index: 1,\r\n      search: ''\r\n    }\r\n  }\r\n\r\n  // Preforms Async request to get array of recipes\r\n  async getRecipes() {\r\n    try{\r\n      const data = await fetch(this.state.url);\r\n      const jsonData = await data.json();\r\n      this.setState({\r\n        recipes: jsonData.recipes,\r\n        search: ''\r\n      });\r\n    } catch(e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n\r\n  // comment function out to make less requests to api and use mock data\r\n   componentDidMount() {\r\n    this.getRecipes();\r\n  } \r\n\r\n  // Displays page based on index (1 for recipe list and 0 for details)\r\n  changePage = index => {\r\n    switch(index) {\r\n      default:\r\n      case 1: \r\n        return(<RecipeList handleDetailId={this.handleDetailId}\r\n          recipes={this.state.recipes}\r\n          value={this.state.search}\r\n          handleSearch={this.handleSearch}\r\n          handleSubmit={this.handleSubmit} />)\r\n      case 0:\r\n        return(<Details id={this.state.details_id} handleIndex={this.handleIndex}/>\r\n          )\r\n    }\r\n  }\r\n\r\n  // Changes index of page (1 for main page, 0 for details page)\r\n  handleIndex = index => {\r\n    this.setState({\r\n      index: index\r\n    })\r\n  }\r\n\r\n  // Changes index of page and dynamically sends recipe id to details component\r\n  handleDetailId = (index, id) => {\r\n    this.setState({\r\n      index: index,\r\n      details_id: id\r\n    })\r\n  }\r\n\r\n  // Puts every keystroke into state's search key\r\n  handleSearch = event => {\r\n    this.setState({\r\n      search: event.target.value\r\n    })\r\n    \r\n  }\r\n  \r\n  // Uses value of Search to send a query to API\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const { baseUrl, search } = this.state;\r\n    this.setState(() => {\r\n      return {url: baseUrl + `&q=${search}`, search: ''}\r\n    }, () => {\r\n      this.getRecipes();\r\n    })\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {this.changePage(this.state.index)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}